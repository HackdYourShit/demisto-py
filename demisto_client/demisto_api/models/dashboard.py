# coding: utf-8

"""
    Cortex XSOAR API

    This is the public REST API to integrate with the Cortex XSOAR server. HTTP request can be sent using any HTTP-client.  For an example dedicated client take a look at: https://github.com/demisto/demisto-py.  Requests must include API-key that can be generated in the Cortex XSOAR web client under 'Settings' -> 'Integrations' -> 'API keys'   Optimistic Locking and Versioning\\:  When using Cortex XSOAR REST API, you will need to make sure to work on the latest version of the item (incident, entry, etc.), otherwise, you will get a DB version error (which not allow you to override a newer item). In addition, you can pass 'version\\: -1' to force data override (make sure that other users data might be lost).  Assume that Alice and Bob both read the same data from Cortex XSOAR server, then they both changed the data, and then both tried to write the new versions back to the server. Whose changes should be saved? Alice’s? Bob’s? To solve this, each data item in Cortex XSOAR has a numeric incremental version. If Alice saved an item with version 4 and Bob trying to save the same item with version 3, Cortex XSOAR will rollback Bob request and returns a DB version conflict error. Bob will need to get the latest item and work on it so Alice work will not get lost.  Example request using 'curl'\\:  ``` curl 'https://hostname:443/incidents/search' -H 'content-type: application/json' -H 'accept: application/json' -H 'Authorization: <API Key goes here>' --data-binary '{\"filter\":{\"query\":\"-status:closed -category:job\",\"period\":{\"by\":\"day\",\"fromValue\":7}}}' --compressed ```  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from demisto_client.demisto_api.models.period import Period  # noqa: F401,E501
from demisto_client.demisto_api.models.version import Version  # noqa: F401,E501
from demisto_client.demisto_api.models.widget_cells import WidgetCells  # noqa: F401,E501


class Dashboard(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'commit_message': 'str',
        'from_date': 'datetime',
        'from_date_license': 'datetime',
        'from_server_version': 'Version',
        'id': 'str',
        'is_common': 'bool',
        'item_version': 'Version',
        'layout': 'WidgetCells',
        'locked': 'bool',
        'modified': 'datetime',
        'name': 'str',
        'owner': 'str',
        'pack_id': 'str',
        'period': 'Period',
        'prev_name': 'str',
        'primary_term': 'int',
        'propagation_labels': 'list[str]',
        'sequence_number': 'int',
        'shared': 'bool',
        'should_commit': 'bool',
        'sort_values': 'list[str]',
        'system': 'bool',
        'to_date': 'datetime',
        'to_server_version': 'Version',
        'vc_should_ignore': 'bool',
        'version': 'int'
    }

    attribute_map = {
        'commit_message': 'commitMessage',
        'from_date': 'fromDate',
        'from_date_license': 'fromDateLicense',
        'from_server_version': 'fromServerVersion',
        'id': 'id',
        'is_common': 'isCommon',
        'item_version': 'itemVersion',
        'layout': 'layout',
        'locked': 'locked',
        'modified': 'modified',
        'name': 'name',
        'owner': 'owner',
        'pack_id': 'packID',
        'period': 'period',
        'prev_name': 'prevName',
        'primary_term': 'primaryTerm',
        'propagation_labels': 'propagationLabels',
        'sequence_number': 'sequenceNumber',
        'shared': 'shared',
        'should_commit': 'shouldCommit',
        'sort_values': 'sortValues',
        'system': 'system',
        'to_date': 'toDate',
        'to_server_version': 'toServerVersion',
        'vc_should_ignore': 'vcShouldIgnore',
        'version': 'version'
    }

    def __init__(self, commit_message=None, from_date=None, from_date_license=None, from_server_version=None, id=None, is_common=None, item_version=None, layout=None, locked=None, modified=None, name=None, owner=None, pack_id=None, period=None, prev_name=None, primary_term=None, propagation_labels=None, sequence_number=None, shared=None, should_commit=None, sort_values=None, system=None, to_date=None, to_server_version=None, vc_should_ignore=None, version=None):  # noqa: E501
        """Dashboard - a model defined in Swagger"""  # noqa: E501

        self._commit_message = None
        self._from_date = None
        self._from_date_license = None
        self._from_server_version = None
        self._id = None
        self._is_common = None
        self._item_version = None
        self._layout = None
        self._locked = None
        self._modified = None
        self._name = None
        self._owner = None
        self._pack_id = None
        self._period = None
        self._prev_name = None
        self._primary_term = None
        self._propagation_labels = None
        self._sequence_number = None
        self._shared = None
        self._should_commit = None
        self._sort_values = None
        self._system = None
        self._to_date = None
        self._to_server_version = None
        self._vc_should_ignore = None
        self._version = None
        self.discriminator = None

        if commit_message is not None:
            self.commit_message = commit_message
        if from_date is not None:
            self.from_date = from_date
        if from_date_license is not None:
            self.from_date_license = from_date_license
        if from_server_version is not None:
            self.from_server_version = from_server_version
        if id is not None:
            self.id = id
        if is_common is not None:
            self.is_common = is_common
        if item_version is not None:
            self.item_version = item_version
        if layout is not None:
            self.layout = layout
        if locked is not None:
            self.locked = locked
        if modified is not None:
            self.modified = modified
        if name is not None:
            self.name = name
        if owner is not None:
            self.owner = owner
        if pack_id is not None:
            self.pack_id = pack_id
        if period is not None:
            self.period = period
        if prev_name is not None:
            self.prev_name = prev_name
        if primary_term is not None:
            self.primary_term = primary_term
        if propagation_labels is not None:
            self.propagation_labels = propagation_labels
        if sequence_number is not None:
            self.sequence_number = sequence_number
        if shared is not None:
            self.shared = shared
        if should_commit is not None:
            self.should_commit = should_commit
        if sort_values is not None:
            self.sort_values = sort_values
        if system is not None:
            self.system = system
        if to_date is not None:
            self.to_date = to_date
        if to_server_version is not None:
            self.to_server_version = to_server_version
        if vc_should_ignore is not None:
            self.vc_should_ignore = vc_should_ignore
        if version is not None:
            self.version = version

    @property
    def commit_message(self):
        """Gets the commit_message of this Dashboard.  # noqa: E501


        :return: The commit_message of this Dashboard.  # noqa: E501
        :rtype: str
        """
        return self._commit_message

    @commit_message.setter
    def commit_message(self, commit_message):
        """Sets the commit_message of this Dashboard.


        :param commit_message: The commit_message of this Dashboard.  # noqa: E501
        :type: str
        """

        self._commit_message = commit_message

    @property
    def from_date(self):
        """Gets the from_date of this Dashboard.  # noqa: E501


        :return: The from_date of this Dashboard.  # noqa: E501
        :rtype: datetime
        """
        return self._from_date

    @from_date.setter
    def from_date(self, from_date):
        """Sets the from_date of this Dashboard.


        :param from_date: The from_date of this Dashboard.  # noqa: E501
        :type: datetime
        """

        self._from_date = from_date

    @property
    def from_date_license(self):
        """Gets the from_date_license of this Dashboard.  # noqa: E501


        :return: The from_date_license of this Dashboard.  # noqa: E501
        :rtype: datetime
        """
        return self._from_date_license

    @from_date_license.setter
    def from_date_license(self, from_date_license):
        """Sets the from_date_license of this Dashboard.


        :param from_date_license: The from_date_license of this Dashboard.  # noqa: E501
        :type: datetime
        """

        self._from_date_license = from_date_license

    @property
    def from_server_version(self):
        """Gets the from_server_version of this Dashboard.  # noqa: E501


        :return: The from_server_version of this Dashboard.  # noqa: E501
        :rtype: Version
        """
        return self._from_server_version

    @from_server_version.setter
    def from_server_version(self, from_server_version):
        """Sets the from_server_version of this Dashboard.


        :param from_server_version: The from_server_version of this Dashboard.  # noqa: E501
        :type: Version
        """

        self._from_server_version = from_server_version

    @property
    def id(self):
        """Gets the id of this Dashboard.  # noqa: E501


        :return: The id of this Dashboard.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Dashboard.


        :param id: The id of this Dashboard.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def is_common(self):
        """Gets the is_common of this Dashboard.  # noqa: E501


        :return: The is_common of this Dashboard.  # noqa: E501
        :rtype: bool
        """
        return self._is_common

    @is_common.setter
    def is_common(self, is_common):
        """Sets the is_common of this Dashboard.


        :param is_common: The is_common of this Dashboard.  # noqa: E501
        :type: bool
        """

        self._is_common = is_common

    @property
    def item_version(self):
        """Gets the item_version of this Dashboard.  # noqa: E501


        :return: The item_version of this Dashboard.  # noqa: E501
        :rtype: Version
        """
        return self._item_version

    @item_version.setter
    def item_version(self, item_version):
        """Sets the item_version of this Dashboard.


        :param item_version: The item_version of this Dashboard.  # noqa: E501
        :type: Version
        """

        self._item_version = item_version

    @property
    def layout(self):
        """Gets the layout of this Dashboard.  # noqa: E501


        :return: The layout of this Dashboard.  # noqa: E501
        :rtype: WidgetCells
        """
        return self._layout

    @layout.setter
    def layout(self, layout):
        """Sets the layout of this Dashboard.


        :param layout: The layout of this Dashboard.  # noqa: E501
        :type: WidgetCells
        """

        self._layout = layout

    @property
    def locked(self):
        """Gets the locked of this Dashboard.  # noqa: E501


        :return: The locked of this Dashboard.  # noqa: E501
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this Dashboard.


        :param locked: The locked of this Dashboard.  # noqa: E501
        :type: bool
        """

        self._locked = locked

    @property
    def modified(self):
        """Gets the modified of this Dashboard.  # noqa: E501


        :return: The modified of this Dashboard.  # noqa: E501
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this Dashboard.


        :param modified: The modified of this Dashboard.  # noqa: E501
        :type: datetime
        """

        self._modified = modified

    @property
    def name(self):
        """Gets the name of this Dashboard.  # noqa: E501


        :return: The name of this Dashboard.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Dashboard.


        :param name: The name of this Dashboard.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def owner(self):
        """Gets the owner of this Dashboard.  # noqa: E501


        :return: The owner of this Dashboard.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Dashboard.


        :param owner: The owner of this Dashboard.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def pack_id(self):
        """Gets the pack_id of this Dashboard.  # noqa: E501


        :return: The pack_id of this Dashboard.  # noqa: E501
        :rtype: str
        """
        return self._pack_id

    @pack_id.setter
    def pack_id(self, pack_id):
        """Sets the pack_id of this Dashboard.


        :param pack_id: The pack_id of this Dashboard.  # noqa: E501
        :type: str
        """

        self._pack_id = pack_id

    @property
    def period(self):
        """Gets the period of this Dashboard.  # noqa: E501


        :return: The period of this Dashboard.  # noqa: E501
        :rtype: Period
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this Dashboard.


        :param period: The period of this Dashboard.  # noqa: E501
        :type: Period
        """

        self._period = period

    @property
    def prev_name(self):
        """Gets the prev_name of this Dashboard.  # noqa: E501


        :return: The prev_name of this Dashboard.  # noqa: E501
        :rtype: str
        """
        return self._prev_name

    @prev_name.setter
    def prev_name(self, prev_name):
        """Sets the prev_name of this Dashboard.


        :param prev_name: The prev_name of this Dashboard.  # noqa: E501
        :type: str
        """

        self._prev_name = prev_name

    @property
    def primary_term(self):
        """Gets the primary_term of this Dashboard.  # noqa: E501


        :return: The primary_term of this Dashboard.  # noqa: E501
        :rtype: int
        """
        return self._primary_term

    @primary_term.setter
    def primary_term(self, primary_term):
        """Sets the primary_term of this Dashboard.


        :param primary_term: The primary_term of this Dashboard.  # noqa: E501
        :type: int
        """

        self._primary_term = primary_term

    @property
    def propagation_labels(self):
        """Gets the propagation_labels of this Dashboard.  # noqa: E501


        :return: The propagation_labels of this Dashboard.  # noqa: E501
        :rtype: list[str]
        """
        return self._propagation_labels

    @propagation_labels.setter
    def propagation_labels(self, propagation_labels):
        """Sets the propagation_labels of this Dashboard.


        :param propagation_labels: The propagation_labels of this Dashboard.  # noqa: E501
        :type: list[str]
        """

        self._propagation_labels = propagation_labels

    @property
    def sequence_number(self):
        """Gets the sequence_number of this Dashboard.  # noqa: E501


        :return: The sequence_number of this Dashboard.  # noqa: E501
        :rtype: int
        """
        return self._sequence_number

    @sequence_number.setter
    def sequence_number(self, sequence_number):
        """Sets the sequence_number of this Dashboard.


        :param sequence_number: The sequence_number of this Dashboard.  # noqa: E501
        :type: int
        """

        self._sequence_number = sequence_number

    @property
    def shared(self):
        """Gets the shared of this Dashboard.  # noqa: E501


        :return: The shared of this Dashboard.  # noqa: E501
        :rtype: bool
        """
        return self._shared

    @shared.setter
    def shared(self, shared):
        """Sets the shared of this Dashboard.


        :param shared: The shared of this Dashboard.  # noqa: E501
        :type: bool
        """

        self._shared = shared

    @property
    def should_commit(self):
        """Gets the should_commit of this Dashboard.  # noqa: E501


        :return: The should_commit of this Dashboard.  # noqa: E501
        :rtype: bool
        """
        return self._should_commit

    @should_commit.setter
    def should_commit(self, should_commit):
        """Sets the should_commit of this Dashboard.


        :param should_commit: The should_commit of this Dashboard.  # noqa: E501
        :type: bool
        """

        self._should_commit = should_commit

    @property
    def sort_values(self):
        """Gets the sort_values of this Dashboard.  # noqa: E501


        :return: The sort_values of this Dashboard.  # noqa: E501
        :rtype: list[str]
        """
        return self._sort_values

    @sort_values.setter
    def sort_values(self, sort_values):
        """Sets the sort_values of this Dashboard.


        :param sort_values: The sort_values of this Dashboard.  # noqa: E501
        :type: list[str]
        """

        self._sort_values = sort_values

    @property
    def system(self):
        """Gets the system of this Dashboard.  # noqa: E501


        :return: The system of this Dashboard.  # noqa: E501
        :rtype: bool
        """
        return self._system

    @system.setter
    def system(self, system):
        """Sets the system of this Dashboard.


        :param system: The system of this Dashboard.  # noqa: E501
        :type: bool
        """

        self._system = system

    @property
    def to_date(self):
        """Gets the to_date of this Dashboard.  # noqa: E501


        :return: The to_date of this Dashboard.  # noqa: E501
        :rtype: datetime
        """
        return self._to_date

    @to_date.setter
    def to_date(self, to_date):
        """Sets the to_date of this Dashboard.


        :param to_date: The to_date of this Dashboard.  # noqa: E501
        :type: datetime
        """

        self._to_date = to_date

    @property
    def to_server_version(self):
        """Gets the to_server_version of this Dashboard.  # noqa: E501


        :return: The to_server_version of this Dashboard.  # noqa: E501
        :rtype: Version
        """
        return self._to_server_version

    @to_server_version.setter
    def to_server_version(self, to_server_version):
        """Sets the to_server_version of this Dashboard.


        :param to_server_version: The to_server_version of this Dashboard.  # noqa: E501
        :type: Version
        """

        self._to_server_version = to_server_version

    @property
    def vc_should_ignore(self):
        """Gets the vc_should_ignore of this Dashboard.  # noqa: E501


        :return: The vc_should_ignore of this Dashboard.  # noqa: E501
        :rtype: bool
        """
        return self._vc_should_ignore

    @vc_should_ignore.setter
    def vc_should_ignore(self, vc_should_ignore):
        """Sets the vc_should_ignore of this Dashboard.


        :param vc_should_ignore: The vc_should_ignore of this Dashboard.  # noqa: E501
        :type: bool
        """

        self._vc_should_ignore = vc_should_ignore

    @property
    def version(self):
        """Gets the version of this Dashboard.  # noqa: E501


        :return: The version of this Dashboard.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Dashboard.


        :param version: The version of this Dashboard.  # noqa: E501
        :type: int
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Dashboard, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Dashboard):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
